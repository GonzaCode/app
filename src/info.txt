COMPONENTES  
1) siempre son funciones
2) siempre retornan algo
3) siempre empiezan con Mayusuculas, si empieza con min babel lo traduce y crea como si fuese una etiqueta
4) siempre retorna un solo elemento
5) siempre PUEDEN recibir props
    5a) los props son de solo lectura / CUIDADO con redefinir los valores de los props
7) Los componentes pueden tener estado (State): son variables internas de un componente las cuales pueden mantener su valor a traves del tiempo a pesar de la reejecucion del mismo componente
8) Los componentes tienen un ciclo de vida separado en tres categorias
   - Mounting : Cuando el componente se monta en el DOM
   - Updating : Cuando el componente se actualiza
   - Unmounting : Cuando el componente se desmonta del DOM


para poner clases no se usa class="" sino className=""

COMPONENTES PRESENTACIONALES: Son componentes que sirven mas uqe nada para mostrar algo en pantalla,
por lo general no buscan la info en el exterior sino que la reciben como props
COMPONENTES CONTAINER: Son componentes que necesitan de una API externa($.get) o la generan/leen de algun lugar(.json local/localStorage) para funcionar

==============================================================================================
CD APP
CREAR REPOSITORIO CON GIT
1) inciar nuestro repositorio / git init
2) configurar nuestro repositorio
    git config --global user.name "GonzaCoder"
    git config --global user.email "gonzalo19_10@hotmail.com"
    git config --global user.password "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" (token de github)

SINCRONIZAR AL REMOTO/CLIENTE
    git remote add origin https://github.com/GonzaCode/app.git
    
        REPETIR PARA SUBIR UN COMMIT
ADD) git add . (para agregar los archivos faltantes al repo)
COMMIT) git commit -m "Comentario en imperativo. ej: hice esto, cambie aquello, falta esto"
PUSH) git push -u origin master

tip: 
    usar  git status
si vas a usar un push y el commit anterior lo subiste manualmente por la web seguro debas usar
un pull y asi te va a dejar usar el push

git log --oneline --graph --all (marca en consola todos los commits hechos)
git checkout

==============================================================================================
DESTRUCTURING

const arr = [1,2,3]

const uno = arr[0]
const dos = arr[1]
const tres = arr[2]

destructuring es remplazar las tres lineas de arriba
por la de abajo

const [uno,dos,tres] = arr

Tenes que crear una constante llamada uno, dos y tres
que valgan lo que haya en arr en esa posición.


ó


const obj = {x:1,y:2,z:3}

const x = obj.x
const y = obj.y
const z = obj.z

const {x:a,y:b,z:c} = obj
const {x:miVariable,y:y,z:z} = obj
const {x,y,z} = obj

Creame una constante llamada a que valga lo que haya en obj en la propiedad x

==============================================================================================
OBJECT PROPERTY SHORTHAND

const nombre = "Horacio"

const persona = {
    nombre: nombre
} 
=
const persona = {
    nombre
}

==============================================================================================
HOOKS (Ganchos) : Son funciones que se le permiten al componente tener funcionalidad que no es
    parte de su comportamiento natural.
    Si o si se ejecutan dentro del componente y no se pueden usar fuera de él.
    No pueden estar dentro de condicionales, loops, etc.

- useState : Permite crear una variable de estado en el componente. 
    Los estados SOLO PUEDEN CAMBIAR ejecutando la funcion que viene en el hook
- useEffect :
- useContext :

(otros que no vamos a usar)
- useReducer
- useRef
- useCallback
- useMemo








https://www.npmjs.com/package/react-toastify
https://ant.design/docs/react/introduce
material-icon

css battle